package databaseworkbench.settings;

import databaseworkbench.FileUtility;
import databaseworkbench.MainWindow;
import databaseworkbench.beans.FieldtypeBean;
import java.io.File;
import java.util.Arrays;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;

/**
 *
 * @author Petri Koskelainen <pete.software.industries@gmail.com>
 */
public class FieldtypeFrame extends javax.swing.JInternalFrame implements InternalFrameListener {

    private static FieldtypeFrame INSTANCE = null;
    DefaultListModel model = new DefaultListModel();
    /**
     * Creates new form FieldtypeFrame
     */
    private FieldtypeFrame() {
        initComponents();
        this.addInternalFrameListener( this );
    }
    
    public static FieldtypeFrame getInstance() {
        if (INSTANCE == null) {
            INSTANCE = new FieldtypeFrame();
        }
        return INSTANCE;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listFieldtypes = new javax.swing.JList<>();
        buttonAdd = new javax.swing.JButton();
        buttonEdit = new javax.swing.JButton();
        buttonRemove = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("Field types");

        listFieldtypes.setModel(model);
        listFieldtypes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(listFieldtypes);

        buttonAdd.setText("Add");
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });

        buttonEdit.setText("Edit");
        buttonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditActionPerformed(evt);
            }
        });

        buttonRemove.setText("Remove");
        buttonRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 8, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonRemove)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        this.addFieldtype();
    }//GEN-LAST:event_buttonAddActionPerformed

    private void buttonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditActionPerformed
        this.renameFieldtype();
    }//GEN-LAST:event_buttonEditActionPerformed

    private void buttonRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoveActionPerformed
        this.removeFieldtype();
    }//GEN-LAST:event_buttonRemoveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonEdit;
    private javax.swing.JButton buttonRemove;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<FieldtypeBean> listFieldtypes;
    // End of variables declaration//GEN-END:variables

    @Override
    public void internalFrameOpened(InternalFrameEvent e) { }

    @Override
    public void internalFrameClosing(InternalFrameEvent e) { }

    @Override
    public void internalFrameClosed(InternalFrameEvent e) { }

    @Override
    public void internalFrameIconified(InternalFrameEvent e) { }

    @Override
    public void internalFrameDeiconified(InternalFrameEvent e) { }

    @Override
    public void internalFrameActivated(InternalFrameEvent e) {
        this.updateList();
    }

    @Override
    public void internalFrameDeactivated(InternalFrameEvent e) { }

    private void updateList() {
        this.model.removeAllElements();
        this.model.addAll( Arrays.asList( FieldtypeBean.values() ));
    }

    private void addFieldtype() {
        String newName = JOptionPane.showInputDialog(MainWindow.getInstance().getJDesktopPane(), "Name for Field type?", "");        
         if (newName != null && !newName.trim().equals("")) {
            newName = newName.trim();
            FieldtypeBean newBean = new FieldtypeBean( newName );
            FieldtypeBean.saveXml(newBean, FieldtypeBean.createFile(newBean) );
            this.updateList();
        }
    }

    private void renameFieldtype() {
        if (this.listFieldtypes.getSelectedValue() != null) {
            FieldtypeBean selectedBean = this.listFieldtypes.getSelectedValue();
            String sOldName = selectedBean.getName();
            String newName = JOptionPane.showInputDialog(MainWindow.getInstance().getJDesktopPane(), "Name for Field type?", sOldName);        
            if (newName != null && !newName.trim().equals("")) {
                newName = newName.trim();
                FieldtypeBean newBean = new FieldtypeBean( newName );
                File file = selectedBean.getMyFile();
                file.renameTo( newBean.getMyFile() );
                FieldtypeBean.saveXml( newBean, FieldtypeBean.createFile(newBean) );
                this.updateList();
            }
        }
    }

    private void removeFieldtype() {
        if (this.listFieldtypes.getSelectedValue() != null) {
            FieldtypeBean bean = this.listFieldtypes.getSelectedValue();
            FileUtility.deleteFile( bean.getMyFile() );
            this.updateList();
        }
    }
}
